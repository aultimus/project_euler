# http://projecteuler.net/problem=12
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#
#     1: 1
#     3: 1,3
#     6: 1,2,3,6
#    10: 1,2,5,10
#    15: 1,3,5,15
#    21: 1,3,7,21
#    28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over
# five hundred divisors?
import doctest
import math
import utils

def gen_triangle_number(n, cache={}):
    """ generate the n'th triangle number
        Utilising caching as gen_triangle_number(n) == gen_triangle_number(n-1) + n
    >>> gen_triangle_number(1)
    1
    >>> gen_triangle_number(2)
    3
    >>> gen_triangle_number(3)
    6
    >>> gen_triangle_number(4)
    10
    >>> gen_triangle_number(5)
    15
    >>> gen_triangle_number(6)
    21
    >>> gen_triangle_number(7)
    28
    """
    try:
        t = cache[n-1] + n
    except KeyError:
        t = sum(xrange(1,n+1))
        cache[n] = t
    return t

doctest.testmod()


for i in xrange(1, 1000000):
    t = gen_triangle_number(i)
    f = utils.factorise(t)
    if not (i % 100):
        print i, len(f) # Progress display
    if len(f) > 500:
        print "result", t
        break
